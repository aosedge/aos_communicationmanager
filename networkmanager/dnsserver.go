// SPDX-License-Identifier: Apache-2.0
//
// Copyright (C) 2023 Renesas Electronics Corporation.
// Copyright (C) 2023 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package networkmanager provides set of API to configure network

package networkmanager

import (
	"bytes"
	"html/template"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"syscall"

	"github.com/aosedge/aos_common/aoserrors"
	"github.com/jackpal/gateway"
	log "github.com/sirupsen/logrus"
	"golang.org/x/sys/unix"
)

const (
	confFileName  = "dnsmasq.conf"
	hostsFileName = "addnhosts"
	pidFileName   = "pidfile"

	dnsMasqTemplate = `## WARNING: THIS IS AN AUTOGENERATED FILE
## AND SHOULD NOT BE EDITED MANUALLY AS IT
## LIKELY TO AUTOMATICALLY BE REPLACED.
all-servers
strict-order
expand-hosts
pid-file={{.PidFile}}
except-interface=lo
bind-dynamic
no-hosts
listen-address={{.IPAddress}}
addn-hosts={{.AddOnHostsFile}}`
)

type dnsServer struct {
	AddOnHostsFile string
	binary         string
	configFile     string
	PidFile        string
	IPAddress      string
	hosts          map[string][]string
}

/***********************************************************************************************************************
 * Vars
 **********************************************************************************************************************/

// These global variable is used to be able to mocking the functionality of networking in tests.
//
//nolint:gochecknoglobals
var (
	LookPath          = exec.LookPath
	DiscoverInterface = gateway.DiscoverInterface
	ExecContext       = execShellCommander
)

var errProcessNotExist = aoserrors.New("process not exist")

/***********************************************************************************************************************
 * Private
 **********************************************************************************************************************/

func newDNSServer(networkDir string) (*dnsServer, error) {
	dnsMasqBinary, err := LookPath("dnsmasq")
	if err != nil {
		return nil, aoserrors.New("dnsmasq binary not found")
	}

	if err := os.MkdirAll(networkDir, 0o755); err != nil {
		return nil, aoserrors.Wrap(err)
	}

	ip, err := DiscoverInterface()
	if err != nil {
		return nil, aoserrors.Wrap(err)
	}

	dnsServer := &dnsServer{
		configFile:     filepath.Join(networkDir, confFileName),
		PidFile:        filepath.Join(networkDir, pidFileName),
		AddOnHostsFile: filepath.Join(networkDir, hostsFileName),
		IPAddress:      ip.String(),
		binary:         dnsMasqBinary,
		hosts:          make(map[string][]string),
	}

	if err := dnsServer.prepareDNSConfFile(); err != nil {
		return nil, err
	}

	if err := dnsServer.restart(); err != nil {
		return nil, err
	}

	return dnsServer, nil
}

func (dns *dnsServer) addHosts(hosts []string, ip string) error {
	for _, host := range hosts {
		for dnsIP, existHosts := range dns.hosts {
			if ip == dnsIP {
				continue
			}

			for _, existHost := range existHosts {
				if host == existHost {
					return aoserrors.Errorf("host %s already exists", host)
				}
			}
		}
	}

	dns.hosts[ip] = hosts

	return nil
}

func (dns *dnsServer) rewriteHostsFile() error {
	f, err := os.OpenFile(dns.AddOnHostsFile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0o644)
	if err != nil {
		return aoserrors.Wrap(err)
	}

	defer func() {
		if err := f.Close(); err != nil {
			log.Errorf("Failed to close hosts file: %v", err)
		}
	}()

	for ip, hosts := range dns.hosts {
		entry := ip

		for _, alias := range hosts {
			entry += "\t" + alias
		}

		entry += "\n"

		if _, err = f.WriteString(entry); err != nil {
			return aoserrors.Wrap(err)
		}
	}

	return nil
}

func (dns *dnsServer) cleanCacheHosts() {
	dns.hosts = make(map[string][]string)
}

func (dns *dnsServer) prepareDNSConfFile() error {
	if _, err := os.Stat(dns.configFile); err == nil {
		return nil
	}

	newConfig, err := dns.generateDNSMasqConfig()
	if err != nil {
		return aoserrors.Wrap(err)
	}

	return aoserrors.Wrap(os.WriteFile(dns.configFile, newConfig, 0o600))
}

func (dns *dnsServer) generateDNSMasqConfig() ([]byte, error) {
	templ, err := template.New("dnsmasq-conf-file").Parse(dnsMasqTemplate)
	if err != nil {
		return nil, aoserrors.Wrap(err)
	}

	var buf bytes.Buffer

	if err = templ.Execute(&buf, dns); err != nil {
		return nil, aoserrors.Wrap(err)
	}

	buf.WriteByte('\n')

	return buf.Bytes(), nil
}

func (dns *dnsServer) restart() error {
	process, _ := dns.findServerProcess()

	if process == nil || !dns.isRunning(process) {
		return dns.start()
	}

	return restartProcess(process)
}

func (dns *dnsServer) findServerProcess() (*os.Process, error) {
	if _, err := os.Stat(dns.PidFile); err != nil {
		if os.IsNotExist(err) {
			return nil, errProcessNotExist
		}

		return nil, aoserrors.Wrap(err)
	}

	pidFileContents, err := os.ReadFile(dns.PidFile)
	if err != nil {
		return nil, aoserrors.Wrap(err)
	}

	if len(pidFileContents) == 0 {
		return nil, errProcessNotExist
	}

	pid, err := strconv.Atoi(strings.TrimSpace(string(pidFileContents)))
	if err != nil {
		return nil, aoserrors.Wrap(err)
	}

	process, err := os.FindProcess(pid)

	return process, aoserrors.Wrap(err)
}

func (dns *dnsServer) isRunning(pid *os.Process) bool {
	if err := pid.Signal(syscall.Signal(0)); err != nil {
		return false
	}

	return true
}

func (dns *dnsServer) start() error {
	args := []string{
		"-u",
		"root",
		"--conf-file=" + dns.configFile,
	}

	output, err := ExecContext(dns.binary, args...)
	if err != nil {
		return aoserrors.Errorf("message: %s, err: %v", output, err)
	}

	return nil
}

func restartProcess(pid *os.Process) error {
	if err := pid.Signal(unix.SIGHUP); err != nil {
		return aoserrors.Wrap(err)
	}

	return nil
}

func execShellCommander(name string, arg ...string) (string, error) {
	output, err := exec.Command(name, arg...).CombinedOutput()

	return string(output), aoserrors.Wrap(err)
}
